<?xml version="1.0" ?>
<launch>
  <arg name="position_controller" default="true"/>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="use_sim_time" default="true"/>
  <!-- <arg name="gui" default="true"/> -->
  <!-- <arg name="headless" default="false"/> -->
  <arg name="debug" default="false"/>

  <arg name="world_file"  default="$(env GYM_GAZEBO_WORLD_EMPTY)"/>
  <arg name="paused" value="true"/>
  <arg name="gui" default="false"/>
  <arg name="headless" value="true"/>
  
  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="paused" value="$(arg paused)"/>
    <arg name="headless" value="$(arg headless)"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="debug" value="false"/>
    <arg name="gui" value="$(arg gui)" />
    <arg name="world_name" value="$(arg world_file)"/>
    <arg name="verbose" value="true"/>
  </include>

  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description" command="$(find xacro)/xacro.py '$(find op3_description)/urdf/robotis_op3.urdf.xacro'" />

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node pkg="gazebo_ros" type="spawn_model" name="urdf_spawner" respawn="false" output="screen"
        args="-urdf -model robotis_op3 -z 0.285 -param robot_description"/>

  <!-- ros_control robotis humanoid launch file -->
  <group if ="$(arg position_controller)">
    <include file="$(find op3_gazebo)/launch/position_controller.launch" />
  </group>

  <!-- op3_gazebo.launch -->
  <param name="gazebo"                   value="true"    type="bool"/>
  <param name="gazebo_robot_name"        value="robotis_op3"/>

  <param name="offset_file_path"         value="$(find op3_manager)/config/offset.yaml"/>
  <param name="robot_file_path"          value="$(find op3_manager)/config/OP3.robot"/>
  <param name="init_file_path"           value="$(find op3_manager)/config/dxl_init_OP3.yaml"/>
  <param name="device_name"              value="/dev/ttyUSB0"/>

  <!-- OP3 Manager -->
  <node pkg="op3_manager" type="op3_manager" name="op3_manager" output="screen"/>
</launch>
